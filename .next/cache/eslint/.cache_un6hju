[{"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\criptomonedas\\index.tsx":"1","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\criptomonedas\\[slug]\\index.tsx":"2","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\exchanges.tsx":"3","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\index.tsx":"4","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\sitemap\\index.tsx":"5","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\_app.tsx":"6","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\_document.tsx":"7","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\_error.tsx":"8","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\Article.tsx":"9","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\cryptoCalculator\\cryptoCalculator.tsx":"10","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\cryptoCard\\cryptoCard.tsx":"11","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\cryptoData\\readPost copy.tsx":"12","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\dropdown\\dropdown.tsx":"13","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\dropdown\\dropdownMobile.tsx":"14","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\header\\searchBar.tsx":"15","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\mediaPost\\readIndex.tsx":"16","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\mediaPost\\readPost.tsx":"17","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\mediaPost\\relatedPosts.tsx":"18","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\returnTop.tsx":"19","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\SectionWrapper.tsx":"20","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\table.tsx":"21"},{"size":3745,"mtime":1677152703393,"results":"22","hashOfConfig":"23"},{"size":5457,"mtime":1677167740356,"results":"24","hashOfConfig":"23"},{"size":1788,"mtime":1677079826135,"results":"25","hashOfConfig":"23"},{"size":1637,"mtime":1677154007212,"results":"26","hashOfConfig":"23"},{"size":738,"mtime":1677171675838,"results":"27","hashOfConfig":"23"},{"size":2495,"mtime":1677175597684,"results":"28","hashOfConfig":"23"},{"size":1740,"mtime":1677174102952,"results":"29","hashOfConfig":"23"},{"size":658,"mtime":1677079751075,"results":"30","hashOfConfig":"23"},{"size":1066,"mtime":1677061808275,"results":"31","hashOfConfig":"23"},{"size":2613,"mtime":1677059299740,"results":"32","hashOfConfig":"23"},{"size":2865,"mtime":1677171675837,"results":"33","hashOfConfig":"23"},{"size":3122,"mtime":1677167206215,"results":"34","hashOfConfig":"23"},{"size":1376,"mtime":1677059836663,"results":"35","hashOfConfig":"23"},{"size":1731,"mtime":1677060987296,"results":"36","hashOfConfig":"23"},{"size":497,"mtime":1677059368509,"results":"37","hashOfConfig":"23"},{"size":1933,"mtime":1677167251017,"results":"38","hashOfConfig":"23"},{"size":3221,"mtime":1671133189260,"results":"39","hashOfConfig":"23"},{"size":2176,"mtime":1671121250518,"results":"40","hashOfConfig":"23"},{"size":1362,"mtime":1677059450480,"results":"41","hashOfConfig":"23"},{"size":2706,"mtime":1677147981410,"results":"42","hashOfConfig":"23"},{"size":1450,"mtime":1677059454234,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1aacxzt",{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","suppressedMessages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","suppressedMessages":"83","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96"},{"filePath":"97","messages":"98","suppressedMessages":"99","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100"},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\criptomonedas\\index.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\criptomonedas\\[slug]\\index.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\exchanges.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\index.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\sitemap\\index.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\_app.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\_document.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\pages\\_error.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\Article.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\cryptoCalculator\\cryptoCalculator.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\cryptoCard\\cryptoCard.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\cryptoData\\readPost copy.tsx",["110"],[],"import React, { Component } from 'react';\r\nimport { IEmpty, IPost, IMediaPost } from '../../definitions/mediaPost'; // TODO esto habra que mejorarlo\r\nimport DOMPurify from 'isomorphic-dompurify';\r\nimport Global from \"../../definitions/global\";\r\nimport Utils from \"../../utils/utils\";\r\n\r\n// TODO pls FIXME\r\nclass Auxiliar extends Component<IPost, IEmpty> {\r\n\r\n    public constructor(props: IPost) {\r\n        super(props);\r\n    }\r\n\r\n    public render() {\r\n        if (Utils.isObjectEmpty(this.props)) return \"\";\r\n\r\n        let midPost: JSX.Element = this.midPost();\r\n        let lowerPost: JSX.Element = this.lowerPost();\r\n\r\n        return (\r\n            <div className=\"readPost\">\r\n                {(this.props.Post.coverImage ? this.upperPost() : \"\")}\r\n                {midPost}\r\n                {/*lowerPost*/}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private upperPost(): JSX.Element {\r\n        const post: IMediaPost = this.props.Post;\r\n        return (\r\n            <div>\r\n                <h1 className=\"title\">\r\n                    {post.title}\r\n                </h1>\r\n                <div className=\"extraInfo\">\r\n                    <div className=\"difficulty\">\r\n                        <span>\r\n                            {post.difficulty}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"readTime\">\r\n                        <i className=\"icon\" />\r\n                        <span> {post.readTime + \"min.\"} </span>\r\n                    </div>\r\n                    <div className=\"publishedDate\">\r\n                        {\"Publicación: \" + this.formatDate(this.props.published_at)}\r\n                    </div>\r\n                    <div className=\"updatedDate\">\r\n                        {\"Actualización: \" + this.formatDate(this.props.updatedAt)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"wrapperImage\">\r\n                    <img className=\"coverImage\"\r\n                        src={Global.host + post.coverImage?.url}\r\n                        alt={post.coverImage.alternativeText}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private midPost(): JSX.Element {\r\n        const test = this.mountHtmlContent();\r\n\r\n        return (\r\n            <div>\r\n                {test}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private lowerPost(): JSX.Element {\r\n        return (\r\n            <div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private mountHtmlContent(): JSX.Element {\r\n        return (\r\n            <div>\r\n                {<div dangerouslySetInnerHTML={{ __html: DOMPurify.sanitize(this.props.Post.content) }} />}\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    private formatDate(date: string): string {\r\n\t\tconst auxDate: Date = new Date(date);\r\n\t\tconst options: Intl.DateTimeFormatOptions = {\r\n\t\t\tmonth: \"short\"\r\n\t\t}\r\n\t\tlet month:string = auxDate.toLocaleDateString(\"es-ES\", options);\r\n\t\tmonth = month.charAt(0).toUpperCase() + month.slice(1);\r\n\t\treturn (auxDate.getDate() + \" \" + month + \",\" + \" \" + auxDate.getFullYear())\r\n\t}\r\n}\r\n\r\nexport default Auxiliar;","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\dropdown\\dropdown.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\dropdown\\dropdownMobile.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\header\\searchBar.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\mediaPost\\readIndex.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\mediaPost\\readPost.tsx",["111"],[],"import React, { Component } from 'react';\r\nimport { IEmpty, IPost, IMediaPost } from '../../definitions/mediaPost'; // TODO esto habra que mejorarlo\r\nimport createDOMPurify from 'dompurify';\r\nimport Global from \"../../definitions/global\";\r\nimport Utils from \"../../utils/utils\";\r\n\r\nclass ReadPost extends Component<IPost, IEmpty> {\r\n\r\n    public constructor(props: IPost) {\r\n        super(props);\r\n    }\r\n\r\n    // After the component did mount\r\n    public componentDidMount() {\r\n    }\r\n\r\n    public render() {\r\n        if (Utils.isObjectEmpty(this.props)) return \"\";\r\n\r\n        let upperPost: JSX.Element = this.upperPost();\r\n        let midPost: JSX.Element = this.midPost();\r\n        let lowerPost: JSX.Element = this.lowerPost();\r\n\r\n        return (\r\n            <div className=\"readPost\">\r\n                {upperPost}\r\n                {midPost}\r\n                {/*lowerPost*/}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private upperPost(): JSX.Element {\r\n        const post: IMediaPost = this.props.Post;\r\n        return (\r\n            <div>\r\n                <h1 className=\"title\">\r\n                    {post.title}\r\n                </h1>\r\n                <div className=\"extraInfo\">\r\n                    <div className=\"difficulty\">\r\n                        <span>\r\n                            {post.difficulty}\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"readTime\">\r\n                        <i className=\"icon\" />\r\n                        <span> {post.readTime + \"min.\"} </span>\r\n                    </div>\r\n                    <div className=\"publishedDate\">\r\n                        {\"Publicación: \" + this.formatDate(this.props.published_at)}\r\n                    </div>\r\n                    <div className=\"updatedDate\">\r\n                        {\"Actualización: \" + this.formatDate(this.props.updatedAt)}\r\n                    </div>\r\n                </div>\r\n                <div className=\"wrapperImage\">\r\n                    <img className=\"coverImage\"\r\n                        src={Global.host + post.coverImage?.url}\r\n                        alt={post.coverImage.alternativeText}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private midPost(): JSX.Element {\r\n        const test = this.mountHtmlContent();\r\n\r\n        return (\r\n            <div>\r\n                {test}\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private lowerPost(): JSX.Element {\r\n        return (\r\n            <div>\r\n                Lower\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private mountHtmlContent(): JSX.Element {\r\n        return (\r\n            <div>\r\n                {<div dangerouslySetInnerHTML={{ __html: createDOMPurify.sanitize(this.props.Post.content) }} />}\r\n            </div>\r\n        );\r\n    }\r\n    \r\n    private formatDate(date: string): string {\r\n\t\tconst auxDate: Date = new Date(date);\r\n\t\tconst options: Intl.DateTimeFormatOptions = {\r\n\t\t\tmonth: \"short\"\r\n\t\t}\r\n\t\tlet month:string = auxDate.toLocaleDateString(\"es-ES\", options);\r\n\t\tmonth = month.charAt(0).toUpperCase() + month.slice(1);\r\n\t\treturn (auxDate.getDate() + \" \" + month + \",\" + \" \" + auxDate.getFullYear())\r\n\t}\r\n}\r\n\r\nexport default ReadPost;","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\mediaPost\\relatedPosts.tsx",["112"],[],"import React, { Component } from 'react';\r\nimport Global from \"../../definitions/global\";\r\nimport { IEmpty, IMediaPost } from '../../definitions/mediaPost'; // TODO esto habra que mejorarlo\r\nimport Utils from \"../../utils/utils\";\r\nimport withRouter, { WithRouter } from \"../../utils/withRouter\";\r\n\r\nexport interface IRelatedPostsProps {\r\n    relatedPosts: IMediaPost[];\r\n}\r\n\r\ntype IRelatedPostsPropsType = IRelatedPostsProps & WithRouter;\r\n\r\nclass RelatedPosts extends Component<IRelatedPostsPropsType, IEmpty> {\r\n\r\n    public constructor(props: IRelatedPostsPropsType) {\r\n        super(props);\r\n    }\r\n\r\n    // After the component did mount\r\n    public componentDidMount() {\r\n    }\r\n\r\n    public render() {\r\n        if (Utils.isObjectEmpty(this.props)) return \"\";\r\n\r\n        return (\r\n            <div className=\"relatedPosts\">\r\n                <div className=\"title\">\r\n                    Publicaciones Relacionadas\r\n                </div>\r\n                <div className=\"content\">\r\n                    {this.renderOneRelatedPost()}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    private renderOneRelatedPost(): JSX.Element[] {\r\n        return this.props.relatedPosts.map((post: IMediaPost, index: number) => {\r\n            return (\r\n                <div className=\"block\" key={index} onClick={() => this.redirect(post.url)} >\r\n                    <a href={Global.hostFront + \"/\" + post.url} onClick={(e) => e.preventDefault()}>\r\n                        <div className=\"leftSide\">\r\n                            <img className=\"coverImage\"\r\n                                src={Global.host + post.coverImage.formats.thumbnail.url}\r\n                                alt={post.coverImage.alternativeText}\r\n                            />\r\n                        </div>\r\n                        <div className=\"rightSide\">\r\n                            {post.title}\r\n                        </div>\r\n                    </a>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    private redirect(URL: string): void {\r\n\t\tconst postLink: string = \"/\" + URL;\r\n\t\tthis.props.navigateWrapped(postLink);\r\n\t}\r\n}\r\n\r\nexport default withRouter(RelatedPosts);","C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\returnTop.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\SectionWrapper.tsx",[],[],"C:\\Users\\Developer\\Desktop\\Strapi\\NodeApi\\components\\table.tsx",[],[],{"ruleId":"113","severity":1,"message":"114","line":54,"column":21,"nodeType":"115","endLine":57,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":58,"column":21,"nodeType":"115","endLine":61,"endColumn":23},{"ruleId":"113","severity":1,"message":"114","line":44,"column":29,"nodeType":"115","endLine":47,"endColumn":31},"@next/next/no-img-element","Using `<img>` could result in slower LCP and higher bandwidth. Use `<Image />` from `next/image` instead to utilize Image Optimization. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement"]